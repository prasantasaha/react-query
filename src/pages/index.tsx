import Head from "next/head";
import { QueryClient, QueryClientProvider, isServer, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import axios from "axios";
import { Suspense } from "react";

const queryClient = new QueryClient();

type User = {
  id: string;
  name: string
}

// Simulate a data fetch using axios
const fetchUsers = async () => {
  console.log(`fetchUsers is called isServer=${isServer}`);
  const { data } = await axios.get<User[]>("https://jsonplaceholder.typicode.com/users");
  return data;
};

type Post = {
  id: string;
  title: string
}

const fetchPosts = async () => {
  console.log(`fetchPosts is called isServer=${isServer}`)
  const { data } = await axios.get<Post[]>("https://jsonplaceholder.typicode.com/posts");
  return data;
};

// Component using useQuery (Non-Suspense Fetching)
const UsersList: React.FC = () => {
  const { data = [], isLoading, error } = useQuery({queryKey: ["users"], queryFn: fetchUsers});

  if (isLoading) return <p>Loading users...</p>;
  if (error instanceof Error) return <p>Error: {error.message}</p>;

  return (
    <div>
      <h3>Users</h3>
      <ul>
        { data.map((user: User) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
};

// Component using useSuspenseQuery (Suspense-Based Fetching)
const PostsList: React.FC = () => {
  const { data = [] } = useSuspenseQuery({queryKey: ["posts"], queryFn: fetchPosts});

  return (
    <div>
      <h3>Posts</h3>
      <ul>
        {data.map((post: Post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </div>
  );
};


export default function Home() {
  return (
    <>
      <Head>
        <title>React Query Example</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <QueryClientProvider client={queryClient}>
      <div>
       <h1>Demo</h1>
        {/* Non-Suspense Query */}
        <UsersList />

        {/* Suspense-Based Query */}
        <Suspense fallback={<p>Loading posts...</p>}>
          <PostsList />
        </Suspense>
      </div>
    </QueryClientProvider>
    </>
  );
}
